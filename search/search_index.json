{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LMSGI - LENGUAJE DE MARCA En este apartado aprenderemos: C\u00f3mo crear una cuenta en GitHub. Qu\u00e9 es MarkDown y c\u00f3mo usarlo. C\u00f3mo crear nuestra propia p\u00e1gina de GitHub utilizando Markdown. GITHUB PAGES MkDocs - Project documentation with Markdown. Options: mkdocs -V / mkdocs --version Show the version and exit. mkdocs -q / mkdocs --quiet Silence warnings. mkdocs -v / mkdocs --verbose Enable verbose output. mkdocs -h / mkdocs --help Print help message and exit. Commands: mkdocs build - Build the MkDocs documentation mkdocs gh-deploy - Deploy your documentation to GitHub Pages mkdocs new [dir-name] - Create a new MkDocs project mkdocs serve - Run the builtin development server","title":"Home"},{"location":"#lmsgi-lenguaje-de-marca","text":"En este apartado aprenderemos: C\u00f3mo crear una cuenta en GitHub. Qu\u00e9 es MarkDown y c\u00f3mo usarlo. C\u00f3mo crear nuestra propia p\u00e1gina de GitHub utilizando Markdown.","title":"LMSGI - LENGUAJE DE MARCA"},{"location":"#github-pages","text":"","title":"GITHUB PAGES"},{"location":"#mkdocs-project-documentation-with-markdown","text":"Options: mkdocs -V / mkdocs --version Show the version and exit. mkdocs -q / mkdocs --quiet Silence warnings. mkdocs -v / mkdocs --verbose Enable verbose output. mkdocs -h / mkdocs --help Print help message and exit. Commands: mkdocs build - Build the MkDocs documentation mkdocs gh-deploy - Deploy your documentation to GitHub Pages mkdocs new [dir-name] - Create a new MkDocs project mkdocs serve - Run the builtin development server","title":"MkDocs - Project documentation with Markdown."},{"location":"GitHub_Pages_Mkdown/","text":"GitHub Pages y mkdocs GitHub Pages mkdocs Enlaces Anexo: instalaci\u00f3n de mkdocs Se supone realizadas las pr\u00e1cticas de uso de GitHub y Markdown. 1. GitHub Pages GitHub nos da la posibilidad de publicar p\u00e1ginas HTML en el repositorio, por ejemplo la documentaci\u00f3n del c\u00f3digo o del proyecto, etc. Para ello Crear repo test-demo-pages Activar Pages en rama main usando la carpeta docs. Clonar repositorio en local. Crear directorio docs y a\u00f1adir y editar fichero index.html con estilos.css. Subir los cambios a GitHub y probar la URL que nos indica Pages que ser\u00e1 similar a http://<usuario>.github.io/<repositorio> 2. mkdocs Pasos a dar: Instalar mkdocs (requiere python3, pip, uso de venv). Usando como gu\u00eda Getting Started with MkDocs Crear proyecto dentro de directorio clonado con mkdocs new misdocs Lanzar mkdocs serve para ver cambios en vivo antes de subirlos a GitHub. A\u00f1adir al menos dos ficheros en formato Markdown. Modificar el fichero de configuraci\u00f3n para que indexe los tres ficheros. Probar a modificar el tema por defecto Una vez terminado hacer mkdocs gh-deploy, esperar unos momentos y ver la p\u00e1gina en GitHub Pages. mkdocs activa Pages y crea una rama de nombre gh-pages donde sube el sitio web generado. 3. Enlaces GitHub Pages: https://docs.github.com/es/pages Mkdocs: https://www.mkdocs.org/ 4. Anexo: instalaci\u00f3n de mkdocs Debe tener instalado: python 03 _pages_mkdocs.md 24 / 2 / 2023 / python-venv Creamos un entorno virtual en el repositorio: $ python3 -m venv mivenv A\u00f1adimos el entorno virtual al fichero .gitignore: $ echo \"mivenv\" >> .gitignore $ echo \".gitignore\" >> .gitignore Activamos el entorno virtual $ source mivenv/bin/activate (mivenv) $ Instalamos mkdocs con pip: (mivenv) $ pip install mkdocs ... (mivenv) $ Y ya podemos usar mkdocs: (mivenv) $ mkdocs new misdocs Al terminar: (mivenv) $ deactivate $ This is a offline tool, your data stays locally and is not send to any server!","title":"GitHub y Markdown"},{"location":"GitHub_Pages_Mkdown/#github-pages-y-mkdocs","text":"GitHub Pages mkdocs Enlaces Anexo: instalaci\u00f3n de mkdocs Se supone realizadas las pr\u00e1cticas de uso de GitHub y Markdown.","title":"GitHub Pages y mkdocs"},{"location":"GitHub_Pages_Mkdown/#1-github-pages","text":"GitHub nos da la posibilidad de publicar p\u00e1ginas HTML en el repositorio, por ejemplo la documentaci\u00f3n del c\u00f3digo o del proyecto, etc. Para ello Crear repo test-demo-pages Activar Pages en rama main usando la carpeta docs. Clonar repositorio en local. Crear directorio docs y a\u00f1adir y editar fichero index.html con estilos.css. Subir los cambios a GitHub y probar la URL que nos indica Pages que ser\u00e1 similar a http://<usuario>.github.io/<repositorio>","title":"1. GitHub Pages"},{"location":"GitHub_Pages_Mkdown/#2-mkdocs","text":"Pasos a dar: Instalar mkdocs (requiere python3, pip, uso de venv). Usando como gu\u00eda Getting Started with MkDocs Crear proyecto dentro de directorio clonado con mkdocs new misdocs Lanzar mkdocs serve para ver cambios en vivo antes de subirlos a GitHub. A\u00f1adir al menos dos ficheros en formato Markdown. Modificar el fichero de configuraci\u00f3n para que indexe los tres ficheros. Probar a modificar el tema por defecto Una vez terminado hacer mkdocs gh-deploy, esperar unos momentos y ver la p\u00e1gina en GitHub Pages. mkdocs activa Pages y crea una rama de nombre gh-pages donde sube el sitio web generado.","title":"2. mkdocs"},{"location":"GitHub_Pages_Mkdown/#3-enlaces","text":"GitHub Pages: https://docs.github.com/es/pages Mkdocs: https://www.mkdocs.org/","title":"3. Enlaces"},{"location":"GitHub_Pages_Mkdown/#4-anexo-instalacion-de-mkdocs","text":"Debe tener instalado: python 03 _pages_mkdocs.md 24 / 2 / 2023 / python-venv Creamos un entorno virtual en el repositorio: $ python3 -m venv mivenv A\u00f1adimos el entorno virtual al fichero .gitignore: $ echo \"mivenv\" >> .gitignore $ echo \".gitignore\" >> .gitignore Activamos el entorno virtual $ source mivenv/bin/activate (mivenv) $ Instalamos mkdocs con pip: (mivenv) $ pip install mkdocs ... (mivenv) $ Y ya podemos usar mkdocs: (mivenv) $ mkdocs new misdocs Al terminar: (mivenv) $ deactivate $ This is a offline tool, your data stays locally and is not send to any server!","title":"4. Anexo: instalaci\u00f3n de mkdocs"},{"location":"Git_y_Github/","text":"Git y Github Git: instalaci\u00f3n GitHub 2.1. Creaci\u00f3n de un repositorio Acceso Github desde local 3.1. Acceso con usuario y PAT ( personal access token ) 3.2. Acceso con ssh Proceso b\u00e1sico 1. Git: instalaci\u00f3n Es posible que ya instalado en m\u00e1quina virtual. Si no apt install git 2. GitHub Debe tener cuenta creada en GitHub. Se supone ya creada en otros m\u00f3dulos. 2.1. Creaci\u00f3n de un repositorio Creamos repositorio test-md-clases : privado con fichero README 3. Acceso Github desde local GitHub ya no permite usar desde l\u00ednea de comandos usuario y clave. En su lugar deber\u00e1 usar un token personal o activar el uso de claves SSH. Observe el resultado al intentar clonar un repositorio privado usando clone HTTPS: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/en/get-started/getting-started- with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. fatal: Autenticaci\u00f3n fall\u00f3 para 'https://github.com/angoies/test-md- clase.git/' alu@xdebian11:~$ 3.1. Acceso con usuario y PAT ( personal access token ) En este enlace https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ nos indica que ocurre y por qu\u00e9. Lo m\u00e1s destacable: Use of tokens offer a number of security benefits over password-based authentication: 1. Unique \u2013 tokens are specific to GitHub and can be generated per use or per device 2. Revocable \u2013 tokens can can be individually revoked at any time without needing to update unaffected credentials 3. Limited \u2013 tokens can be narrowly scoped to allow only the access necessary for the use case 4. Random \u2013 tokens are not subject to the types of dictionary or brute force attempts that simpler passwords that you need to remember or enter regularly might be Lo que nos interesa: tenemos que crear un token y utilizarlo en lugar de la clave . Enlace directo a creaci\u00f3n de tokens: https://github.com/settings/tokens Instrucciones de c\u00f3mo crear el token Para esta pr\u00e1ctica basta generar un token \"cl\u00e1sico\" y darle todos los permisos al scope repo. Almacene el token en un lugar seguro, lo necesitar\u00e1 a continuaci\u00f3n. Para comprobar que todo es correcto volvemos a intentar el clone HTTPS usando como password el token obtenido: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. alu@xdebian11:~$ Cada vez que intente acceder a un repositorio le pedir\u00e1 usuario y token. Para trabajar con m\u00e1s comodidad es posible almacenar usuario y token en cache usando el comando git config --global credential.helper 'cache --timeout 3600' ( timeout especificado en segundos). Tras ejecutarlo le pedir\u00e1 autenticarse una vez y eso datos se quedan en cache con ese tiempo de refresco. alu@xdebian11:~$ cd test-md-clase/ alu@xdebian11:~/test-md-clase$ git config --global credential.helper 'cache --timeout 3600' alu@xdebian11:~/test-md-clase$ git push Username for 'https://github.com': angoies Password for 'https://angoies@github.com': Everything up-to-date alu@xdebian11:~/test-md-clase$ git push Everything up-to-date alu@xdebian11:~/test-md-clase$ Es posible almacenar el token de forma permanente, pero tenga en cuenta que lo har\u00e1 en texto plano en el fichero ~/.git-credentials. $ git config --local credential.helper store $ git push http://example.com/repo.git Username: <type your username> Password: <type your password> [several days later] $ git push http://example.com/repo.git [your credentials are used automatically] Si quiere personalizar el fichero donde se almacena puede usar la opci\u00f3n git config --global credential.helper \"store --file ~/.my-credentials\" 3.2. Acceso con ssh Podemos usar otro modo de autenticaci\u00f3n: una clave SSH. Para ellos debe seguir los pasos indicados en Connecting to GitHub with SSH. Aviso : Tenga en cuenta que si ya hemos clonado el repositorio con HTTPS ser\u00e1 necesario modificar la configuraci\u00f3n de los remotos. Para ello puede seguir estas indicaciones https://docs.github.com/es/get- started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh En nuestro caso borraremos el directorio creado con el clone HTTPS y volvemos a hacer un clone SSH. alu@xdebian11:~/test-md-clase$ cd .. alu@xdebian11:~$ rm -rf test-md-clase/ alu@xdebian11:~$ Si intentamos clonar: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... The authenticity of host 'github.com (140.82.121.3)' can't be established. ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,140.82.121.3' (ECDSA) to the list of known hosts. git@github.com: Permission denied (publickey). fatal: No se pudo leer del repositorio remoto. Por favor aseg\u00farate que tienes los permisos de acceso correctos y que el repositorio existe. alu@xdebian11:~$ Es necesario crear las claves SSH. Para ello tiene estos dos enlaces, crear en local y a\u00f1adir en GitHub: 1. Generaci\u00f3n de una nueva clave SSH 2. Agregar una clave SSH nueva a tu cuenta de GitHub Vea un ejemplo de creaci\u00f3n de las claves alu@xdebian11:~$ ssh-keygen -t ed25519 -C \"jgomez@iesromerovargas.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/alu/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/alu/.ssh/id_ed Your public key has been saved in /home/alu/.ssh/id_ed25519.pub The key fingerprint is: SHA256:10h/UuiiNSGtpnb7brUoPdyu79mQSyBtsPiQGHLgicc jgomez@iesromerovargas.com The key's randomart image is: +--[ED25519 256]--+ |. | | + o.. | |. E o o +.. | |. o o o B *. | |. + S X =. | | = * +.+ | | o +o ++. | |. ...*.o= | | .=+**. | +----[SHA256]-----+ alu@xdebian11:~$ ls -al .ssh/*.pub -rw-r--r-- 1 alu alu 108 feb 23 09:12 .ssh/id_ed25519.pub alu@xdebian11:~$ cat .ssh/id_ed25519.pub ssh-ed AAAAC3NzaC1lZDI1NTE5AAAAIIbaMp/uhRclwPz0AbQhooXxQN7IsUMfhqE9KtAOtoXa jgomez@iesromerovargas.com alu@xdebian11:~$ Luego seguimos los pasos para a\u00f1adir la clave SSH a GitHub y finalmente probamos: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... Enter passphrase for key '/home/alu/.ssh/id_ed25519': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 alu@xdebian11:~$ Puede \"cachear la autenticaci\u00f3n usando ssh-agent como se indica en este enlace. 4. Proceso b\u00e1sico clone del repositorio creado previamente alu@xdebian11:~$ git clone git@github.com:angoies/test-md-github.git Clonando en 'test-md-github'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Recibiendo objetos: 100% (3/3), listo. alu@xdebian11:~$ cd test-md-github/ alu@xdebian11:~/test-md-github$ ls README.md alu@xdebian11:~/test-md-github$ Trabajo en local: Modificar el fichero README.md alu@xdebian11:~/test-md-github$ code README.md alu@xdebian11:~/test-md-github$ status alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios no rastreados para el commit: (usa \"git add <archivo>...\" para actualizar lo que ser\u00e1 confirmado) (usa \"git restore <archivo>...\" para descartar los cambios en el directorio de trabajo) modificado: README.md sin cambios agregados al commit (usa \"git add\" y/o \"git commit -a\") alu@xdebian11:~/test-md-github$ add alu@xdebian11:~/test-md-github$ git add README.md alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios a ser confirmados: (usa \"git restore --staged <archivo>...\" para sacar del \u00e1rea de stage) modificado: README.md alu@xdebian11:~/test-md-github$ commit alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" Author identity unknown *** Por favor cu\u00e9ntame quien eres. Corre git config --global user.email \"you@example.com\" git config --global user.name \"Tu Nombre\" para configurar la identidad por defecto de tu cuenta. Omite --global para configurar tu identidad solo en este repositorio. fatal: no es posible auto-detectar la direcci\u00f3n de correo (se obtuvo 'alu@xdebian11.(none)') alu@xdebian11:~/test-md-github$ git config user.email \"jgomez@iesromerovargas.com\" alu@xdebian11:~/test-md-github$ git config user.name \"Jose Gomez\" alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" [main 64f7ed1] cambios en README para demo 1 file changed, 20 insertions(+) alu@xdebian11:~/test-md-github$ push alu@xdebian11:~/test-md-github$ git push Enumerando objetos: 5, listo. Contando objetos: 100% (5/5), listo. Comprimiendo objetos: 100% (2/2), listo. Escribiendo objetos: 100% (3/3), 431 bytes | 431.00 KiB/s, listo. Total 3 (delta 0), reusado 0 (delta 0), pack-reusado 0 To github.com:angoies/test-md-github.git c9a4725..64f7ed1 main -> main alu@xdebian11:~/test-md-github$ Verificar en GitHub los cambios.","title":"GitHub"},{"location":"Git_y_Github/#git-y-github","text":"Git: instalaci\u00f3n GitHub 2.1. Creaci\u00f3n de un repositorio Acceso Github desde local 3.1. Acceso con usuario y PAT ( personal access token ) 3.2. Acceso con ssh Proceso b\u00e1sico","title":"Git y Github"},{"location":"Git_y_Github/#1-git-instalacion","text":"Es posible que ya instalado en m\u00e1quina virtual. Si no apt install git","title":"1. Git: instalaci\u00f3n"},{"location":"Git_y_Github/#2-github","text":"Debe tener cuenta creada en GitHub. Se supone ya creada en otros m\u00f3dulos.","title":"2. GitHub"},{"location":"Git_y_Github/#21-creacion-de-un-repositorio","text":"Creamos repositorio test-md-clases : privado con fichero README","title":"2.1. Creaci\u00f3n de un repositorio"},{"location":"Git_y_Github/#3-acceso-github-desde-local","text":"GitHub ya no permite usar desde l\u00ednea de comandos usuario y clave. En su lugar deber\u00e1 usar un token personal o activar el uso de claves SSH. Observe el resultado al intentar clonar un repositorio privado usando clone HTTPS: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/en/get-started/getting-started- with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. fatal: Autenticaci\u00f3n fall\u00f3 para 'https://github.com/angoies/test-md- clase.git/' alu@xdebian11:~$","title":"3. Acceso Github desde local"},{"location":"Git_y_Github/#31-acceso-con-usuario-y-pat-personal-access-token","text":"En este enlace https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ nos indica que ocurre y por qu\u00e9. Lo m\u00e1s destacable: Use of tokens offer a number of security benefits over password-based authentication: 1. Unique \u2013 tokens are specific to GitHub and can be generated per use or per device 2. Revocable \u2013 tokens can can be individually revoked at any time without needing to update unaffected credentials 3. Limited \u2013 tokens can be narrowly scoped to allow only the access necessary for the use case 4. Random \u2013 tokens are not subject to the types of dictionary or brute force attempts that simpler passwords that you need to remember or enter regularly might be Lo que nos interesa: tenemos que crear un token y utilizarlo en lugar de la clave . Enlace directo a creaci\u00f3n de tokens: https://github.com/settings/tokens Instrucciones de c\u00f3mo crear el token Para esta pr\u00e1ctica basta generar un token \"cl\u00e1sico\" y darle todos los permisos al scope repo. Almacene el token en un lugar seguro, lo necesitar\u00e1 a continuaci\u00f3n. Para comprobar que todo es correcto volvemos a intentar el clone HTTPS usando como password el token obtenido: alu@xdebian11:~$ git clone https://github.com/angoies/test-md-clase.git Clonando en 'test-md-clase'... Username for 'https://github.com': angoies Password for 'https://angoies@github.com': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. alu@xdebian11:~$ Cada vez que intente acceder a un repositorio le pedir\u00e1 usuario y token. Para trabajar con m\u00e1s comodidad es posible almacenar usuario y token en cache usando el comando git config --global credential.helper 'cache --timeout 3600' ( timeout especificado en segundos). Tras ejecutarlo le pedir\u00e1 autenticarse una vez y eso datos se quedan en cache con ese tiempo de refresco. alu@xdebian11:~$ cd test-md-clase/ alu@xdebian11:~/test-md-clase$ git config --global credential.helper 'cache --timeout 3600' alu@xdebian11:~/test-md-clase$ git push Username for 'https://github.com': angoies Password for 'https://angoies@github.com': Everything up-to-date alu@xdebian11:~/test-md-clase$ git push Everything up-to-date alu@xdebian11:~/test-md-clase$ Es posible almacenar el token de forma permanente, pero tenga en cuenta que lo har\u00e1 en texto plano en el fichero ~/.git-credentials. $ git config --local credential.helper store $ git push http://example.com/repo.git Username: <type your username> Password: <type your password> [several days later] $ git push http://example.com/repo.git [your credentials are used automatically] Si quiere personalizar el fichero donde se almacena puede usar la opci\u00f3n git config --global credential.helper \"store --file ~/.my-credentials\"","title":"3.1. Acceso con usuario y PAT ( personal access token )"},{"location":"Git_y_Github/#32-acceso-con-ssh","text":"Podemos usar otro modo de autenticaci\u00f3n: una clave SSH. Para ellos debe seguir los pasos indicados en Connecting to GitHub with SSH. Aviso : Tenga en cuenta que si ya hemos clonado el repositorio con HTTPS ser\u00e1 necesario modificar la configuraci\u00f3n de los remotos. Para ello puede seguir estas indicaciones https://docs.github.com/es/get- started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh En nuestro caso borraremos el directorio creado con el clone HTTPS y volvemos a hacer un clone SSH. alu@xdebian11:~/test-md-clase$ cd .. alu@xdebian11:~$ rm -rf test-md-clase/ alu@xdebian11:~$ Si intentamos clonar: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... The authenticity of host 'github.com (140.82.121.3)' can't be established. ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,140.82.121.3' (ECDSA) to the list of known hosts. git@github.com: Permission denied (publickey). fatal: No se pudo leer del repositorio remoto. Por favor aseg\u00farate que tienes los permisos de acceso correctos y que el repositorio existe. alu@xdebian11:~$ Es necesario crear las claves SSH. Para ello tiene estos dos enlaces, crear en local y a\u00f1adir en GitHub: 1. Generaci\u00f3n de una nueva clave SSH 2. Agregar una clave SSH nueva a tu cuenta de GitHub Vea un ejemplo de creaci\u00f3n de las claves alu@xdebian11:~$ ssh-keygen -t ed25519 -C \"jgomez@iesromerovargas.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/alu/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/alu/.ssh/id_ed Your public key has been saved in /home/alu/.ssh/id_ed25519.pub The key fingerprint is: SHA256:10h/UuiiNSGtpnb7brUoPdyu79mQSyBtsPiQGHLgicc jgomez@iesromerovargas.com The key's randomart image is: +--[ED25519 256]--+ |. | | + o.. | |. E o o +.. | |. o o o B *. | |. + S X =. | | = * +.+ | | o +o ++. | |. ...*.o= | | .=+**. | +----[SHA256]-----+ alu@xdebian11:~$ ls -al .ssh/*.pub -rw-r--r-- 1 alu alu 108 feb 23 09:12 .ssh/id_ed25519.pub alu@xdebian11:~$ cat .ssh/id_ed25519.pub ssh-ed AAAAC3NzaC1lZDI1NTE5AAAAIIbaMp/uhRclwPz0AbQhooXxQN7IsUMfhqE9KtAOtoXa jgomez@iesromerovargas.com alu@xdebian11:~$ Luego seguimos los pasos para a\u00f1adir la clave SSH a GitHub y finalmente probamos: alu@xdebian11:~$ git clone git@github.com:angoies/test-md-clase.git Clonando en 'test-md-clase'... Enter passphrase for key '/home/alu/.ssh/id_ed25519': remote: Enumerating objects: 15, done. remote: Counting objects: 100% (15/15), done. remote: Compressing objects: 100% (12/12), done. Recibiendo objetos: 100% (15/15), listo. Resolviendo deltas: 100% (2/2), listo. remote: Total 15 (delta 2), reused 9 (delta 1), pack-reused 0 alu@xdebian11:~$ Puede \"cachear la autenticaci\u00f3n usando ssh-agent como se indica en este enlace.","title":"3.2. Acceso con ssh"},{"location":"Git_y_Github/#4-proceso-basico","text":"clone del repositorio creado previamente alu@xdebian11:~$ git clone git@github.com:angoies/test-md-github.git Clonando en 'test-md-github'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Recibiendo objetos: 100% (3/3), listo. alu@xdebian11:~$ cd test-md-github/ alu@xdebian11:~/test-md-github$ ls README.md alu@xdebian11:~/test-md-github$ Trabajo en local: Modificar el fichero README.md alu@xdebian11:~/test-md-github$ code README.md alu@xdebian11:~/test-md-github$ status alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios no rastreados para el commit: (usa \"git add <archivo>...\" para actualizar lo que ser\u00e1 confirmado) (usa \"git restore <archivo>...\" para descartar los cambios en el directorio de trabajo) modificado: README.md sin cambios agregados al commit (usa \"git add\" y/o \"git commit -a\") alu@xdebian11:~/test-md-github$ add alu@xdebian11:~/test-md-github$ git add README.md alu@xdebian11:~/test-md-github$ git status En la rama main Tu rama est\u00e1 actualizada con 'origin/main'. Cambios a ser confirmados: (usa \"git restore --staged <archivo>...\" para sacar del \u00e1rea de stage) modificado: README.md alu@xdebian11:~/test-md-github$ commit alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" Author identity unknown *** Por favor cu\u00e9ntame quien eres. Corre git config --global user.email \"you@example.com\" git config --global user.name \"Tu Nombre\" para configurar la identidad por defecto de tu cuenta. Omite --global para configurar tu identidad solo en este repositorio. fatal: no es posible auto-detectar la direcci\u00f3n de correo (se obtuvo 'alu@xdebian11.(none)') alu@xdebian11:~/test-md-github$ git config user.email \"jgomez@iesromerovargas.com\" alu@xdebian11:~/test-md-github$ git config user.name \"Jose Gomez\" alu@xdebian11:~/test-md-github$ git commit -m \"cambios en README para demo\" [main 64f7ed1] cambios en README para demo 1 file changed, 20 insertions(+) alu@xdebian11:~/test-md-github$ push alu@xdebian11:~/test-md-github$ git push Enumerando objetos: 5, listo. Contando objetos: 100% (5/5), listo. Comprimiendo objetos: 100% (2/2), listo. Escribiendo objetos: 100% (3/3), 431 bytes | 431.00 KiB/s, listo. Total 3 (delta 0), reusado 0 (delta 0), pack-reusado 0 To github.com:angoies/test-md-github.git c9a4725..64f7ed1 main -> main alu@xdebian11:~/test-md-github$ Verificar en GitHub los cambios.","title":"4. Proceso b\u00e1sico"},{"location":"Json/","text":"JSON Introducci\u00f3n Enlaces 1. Introducci\u00f3n Este bloque es parte del temario de 2\u00ba curso. Se hace peque\u00f1a introducci\u00f3n y poco m\u00e1s. El ejemplo de uso m\u00e1s habitual de JSON es en el uso de APIS web. Estas APIS ofrecen su servicios en formato JSON o XML. Desde diferentes lenguajes de programaci\u00f3n puede lanzar peticiones a estas APIs y procesar el resultado. Observe un ejemplo muy sencillo de uso una API (ficticia) https://jsonplaceholder.typicode.com/users/ https://jsonplaceholder.typicode.com/todos/ https://jsonplaceholder.typicode.com/users/ O esta otra relacionada con \"Stars Wars\": https://swapi.dev/api/people/1/?format=json https://swapi.dev/api/films/3/?format=json Puede invocar desde CLI con el comando curl. En la primera API: clases@lg:~$ curl https://jsonplaceholder.typicode.com/todos/ { \"userId\": 1, \"id\": 1, \"title\": \"delectus aut autem\", \"completed\": false }clases@lg:~$ O sobre la segunda API donde: hay que especificar el formato de salida (?format=json). procesamos la salida para hacerla m\u00e1s legible con json_pp. clases@lg:~$ curl -s https://swapi.dev/api/people/2/?format=json | json_pp { \"birth_year\" : \"112BBY\", \"created\" : \"2014-12-10T15:10:51.357000Z\", \"edited\" : \"2014-12-20T21:17:50.309000Z\", \"eye_color\" : \"yellow\", \"films\" : [ \"https://swapi.dev/api/films/1/\", 05_JSON.md 6/3/ / \"https://swapi.dev/api/films/2/\", \"https://swapi.dev/api/films/3/\", \"https://swapi.dev/api/films/4/\", \"https://swapi.dev/api/films/5/\", \"https://swapi.dev/api/films/6/\" ], \"gender\" : \"n/a\", \"hair_color\" : \"n/a\", \"height\" : \"167\", \"homeworld\" : \"https://swapi.dev/api/planets/1/\", \"mass\" : \"75\", \"name\" : \"C-3PO\", .... } clases@lg:~$ 2. Enlaces JSON: http://www.json.org/json-es.html Wikipedia: https://es.wikipedia.org/wiki/JSON Tutoriales: W3Schools JSON: https://www.w3schools.com/js/js_json_intro.asp JSON tutorial: https://beginnersbook.com/2015/04/json-tutorial/ The Star Wars API: https://swapi.dev/","title":"JSON"},{"location":"Json/#json","text":"Introducci\u00f3n Enlaces","title":"JSON"},{"location":"Json/#1-introduccion","text":"Este bloque es parte del temario de 2\u00ba curso. Se hace peque\u00f1a introducci\u00f3n y poco m\u00e1s. El ejemplo de uso m\u00e1s habitual de JSON es en el uso de APIS web. Estas APIS ofrecen su servicios en formato JSON o XML. Desde diferentes lenguajes de programaci\u00f3n puede lanzar peticiones a estas APIs y procesar el resultado. Observe un ejemplo muy sencillo de uso una API (ficticia) https://jsonplaceholder.typicode.com/users/ https://jsonplaceholder.typicode.com/todos/ https://jsonplaceholder.typicode.com/users/ O esta otra relacionada con \"Stars Wars\": https://swapi.dev/api/people/1/?format=json https://swapi.dev/api/films/3/?format=json Puede invocar desde CLI con el comando curl. En la primera API: clases@lg:~$ curl https://jsonplaceholder.typicode.com/todos/ { \"userId\": 1, \"id\": 1, \"title\": \"delectus aut autem\", \"completed\": false }clases@lg:~$ O sobre la segunda API donde: hay que especificar el formato de salida (?format=json). procesamos la salida para hacerla m\u00e1s legible con json_pp. clases@lg:~$ curl -s https://swapi.dev/api/people/2/?format=json | json_pp { \"birth_year\" : \"112BBY\", \"created\" : \"2014-12-10T15:10:51.357000Z\", \"edited\" : \"2014-12-20T21:17:50.309000Z\", \"eye_color\" : \"yellow\", \"films\" : [ \"https://swapi.dev/api/films/1/\", 05_JSON.md 6/3/ / \"https://swapi.dev/api/films/2/\", \"https://swapi.dev/api/films/3/\", \"https://swapi.dev/api/films/4/\", \"https://swapi.dev/api/films/5/\", \"https://swapi.dev/api/films/6/\" ], \"gender\" : \"n/a\", \"hair_color\" : \"n/a\", \"height\" : \"167\", \"homeworld\" : \"https://swapi.dev/api/planets/1/\", \"mass\" : \"75\", \"name\" : \"C-3PO\", .... } clases@lg:~$","title":"1. Introducci\u00f3n"},{"location":"Json/#2-enlaces","text":"JSON: http://www.json.org/json-es.html Wikipedia: https://es.wikipedia.org/wiki/JSON Tutoriales: W3Schools JSON: https://www.w3schools.com/js/js_json_intro.asp JSON tutorial: https://beginnersbook.com/2015/04/json-tutorial/ The Star Wars API: https://swapi.dev/","title":"2. Enlaces"},{"location":"Markdown/","text":"Markdown Introducci\u00f3n Utilizaci\u00f3n B\u00e1sico Tareas Enlaces 1. Introducci\u00f3n Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Its key design goal was readability, that the language be readable as-is, Ojo con las versiones. Por ejemplo la de GitHub nos dice: 1.1What is GitHub Flavored Markdown? GitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown that is currently supported for user content on GitHub.com and GitHub Enterprise. This formal specification, based on the CommonMark Spec, defines the syntax and semantics of this dialect. GFM is a strict superset of CommonMark. All the features which are supported in GitHub user content and that are not specified on the original CommonMark Spec are hence known as extensions, and highlighted as such. While GFM supports a wide range of inputs, it\u2019s worth noting that GitHub.com and GitHub Enterprise perform additional post-processing and sanitization after GFM is converted to HTML to ensure security and consistency of the website. 2. Utilizaci\u00f3n Documentaci\u00f3n (permite control de versiones) GitHub (publica directamente en formato Markdown) o en GitHub Pages usando mkdocs Mapas (markmap) Presentaciones (marp) 3. B\u00e1sico En general debe ser suficiente este conjunto de marcas: Cabeceras de nivel P\u00e1rrafos Citas Listas 02 _markdown.md 23 / 2 / 2023 / Enlaces Im\u00e1genes C\u00f3digo Bloques de c\u00f3digo Separadores strong / em Y puede ampliar con otras marcas: Tablas Listas de tareas emoticonos 4. Tareas Crear documento Markdown. Incluir distintos tipos de marcas. Ampliar: a\u00f1adir plugins VScode. Intentar numeraci\u00f3n de secciones/cabeceras, a\u00f1adir tabla de contenidos o imprimir a PDF. Ampliar: a\u00f1adir plugin VScode. Crear esquema que se traduce a mapa (markmap) 5. Enlaces Markdown original: https://daringfireball.net/projects/markdown/basics CommonMark Spec: https://spec.commonmark.org/0.30/ Github Markdown: https://github.github.com/gfm/#what-is-github-flavored-markdown y Markmap: https://markmap.js.org/repl Marp: https://marp.app/ VScode plugins: Markmap:https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode Marp: https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode MD All in One: https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all- in-one Markdown to PDF: https://marketplace.visualstudio.com/items?itemName=yzane.markdown- pdf Typora: https://typora.io/ This is a offline tool, your data stays locally and is not send to any server!","title":"Markdown"},{"location":"Markdown/#markdown","text":"Introducci\u00f3n Utilizaci\u00f3n B\u00e1sico Tareas Enlaces","title":"Markdown"},{"location":"Markdown/#1-introduccion","text":"Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Its key design goal was readability, that the language be readable as-is, Ojo con las versiones. Por ejemplo la de GitHub nos dice: 1.1What is GitHub Flavored Markdown? GitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown that is currently supported for user content on GitHub.com and GitHub Enterprise. This formal specification, based on the CommonMark Spec, defines the syntax and semantics of this dialect. GFM is a strict superset of CommonMark. All the features which are supported in GitHub user content and that are not specified on the original CommonMark Spec are hence known as extensions, and highlighted as such. While GFM supports a wide range of inputs, it\u2019s worth noting that GitHub.com and GitHub Enterprise perform additional post-processing and sanitization after GFM is converted to HTML to ensure security and consistency of the website.","title":"1. Introducci\u00f3n"},{"location":"Markdown/#2-utilizacion","text":"Documentaci\u00f3n (permite control de versiones) GitHub (publica directamente en formato Markdown) o en GitHub Pages usando mkdocs Mapas (markmap) Presentaciones (marp)","title":"2. Utilizaci\u00f3n"},{"location":"Markdown/#3-basico","text":"En general debe ser suficiente este conjunto de marcas: Cabeceras de nivel P\u00e1rrafos Citas Listas 02 _markdown.md 23 / 2 / 2023 / Enlaces Im\u00e1genes C\u00f3digo Bloques de c\u00f3digo Separadores strong / em Y puede ampliar con otras marcas: Tablas Listas de tareas emoticonos","title":"3. B\u00e1sico"},{"location":"Markdown/#4-tareas","text":"Crear documento Markdown. Incluir distintos tipos de marcas. Ampliar: a\u00f1adir plugins VScode. Intentar numeraci\u00f3n de secciones/cabeceras, a\u00f1adir tabla de contenidos o imprimir a PDF. Ampliar: a\u00f1adir plugin VScode. Crear esquema que se traduce a mapa (markmap)","title":"4. Tareas"},{"location":"Markdown/#5-enlaces","text":"Markdown original: https://daringfireball.net/projects/markdown/basics CommonMark Spec: https://spec.commonmark.org/0.30/ Github Markdown: https://github.github.com/gfm/#what-is-github-flavored-markdown y Markmap: https://markmap.js.org/repl Marp: https://marp.app/ VScode plugins: Markmap:https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode Marp: https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode MD All in One: https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all- in-one Markdown to PDF: https://marketplace.visualstudio.com/items?itemName=yzane.markdown- pdf Typora: https://typora.io/ This is a offline tool, your data stays locally and is not send to any server!","title":"5. Enlaces"},{"location":"Yaml/","text":"YAML Introducci\u00f3n Ejemplo b\u00e1sico Ejemplos de uso 3.1. En mkdocs 3.2. En despliegues 3.2.1. GitHub Action 3.2.2. Docker compose 3.2.3. Ansible o Kubernetes Enlaces 1. Introducci\u00f3n YAML (/\u02c8j\u00e6m\u0259l/) (see \u00a7 History and name) is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted. A YAML document represents a computer program's native data structure in a human readable text form. A node in a YAML document can have three basic data types: Scalar: Atomic data types like strings, numbers, booleans and null Sequence: A list of nodes Mapping: A map of nodes to nodes. Also known as Hashes, Hash Maps, Dictionaries or Objects. Unlike in many programming languages, a key can be more than just a string. It can be a sequence or mapping itself. YAML fue creado bajo la creencia de que todos los datos pueden ser representados adecuadamente como combinaciones de listas, hashes (mapeos) y datos escalares (valores simples). La sintaxis es relativamente sencilla y fue dise\u00f1ada teniendo en cuenta que fuera muy legible pero que a la vez fuese f\u00e1cilmente mapeable a los tipos de datos m\u00e1s comunes en la mayor\u00eda de los lenguajes de alto nivel. 2. Ejemplo b\u00e1sico Un mapa o hash asocia o enlaza un valor con una clave separados por :. Por ejemplo invoice o name. En el ejemplo se le han asociado valores at\u00f3micos: un entero y una cadena. Puede haber mapas anidados, como address. Listas o secuencias como la del mapa order_items:. Admite otra notaci\u00f3n order_items: [ Sled , Wrapping Paper ] invoice: 314159 name: Santa Claus address: street: Santa Claus Lane city: North Pole order_items: Sled Wrapping Paper 3. Ejemplos de uso 3.1. En mkdocs El fichero de configuraci\u00f3n de mkdocs mkdocs.yml site_name: MkLorum site_url: https://example.com/ nav: Home: index.md About: about.md 3.2. En despliegues Es muy frecuente usar YAML en ficheros de configuraci\u00f3n para despliegues de sistemas, contenedores etc. A continuaci\u00f3n algunos ejemplos: 3. 2. 1. GitHub Action name: Linux on: [push] # Compact Flow Style Sequence jobs: build: name: Run Tests runs-on: ubuntu-latest steps: name: Say Hello run: echo hello 3. 2. 2. Docker compose Para despliegues con Docker: version: \"3.9\" services: db: image: mysql:5. volumes: db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: db image: wordpress:latest volumes: wordpress_data:/var/www/html ports: \"8000:80\" restart: always environment: WORDPRESS_DB_HOST: db: WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: db_data: {} wordpress_data: {} 3. 2. 3. Ansible o Kubernetes De forma parecida, para despliegues con Ansible: --- name: update web servers hosts: webservers remote_user: root tasks: name: ensure apache is at the latest version yum: name: httpd state: latest name: write the apache config file template: src: /srv/httpd.j dest: /etc/httpd.conf name: update db servers hosts: databases remote_user: root tasks: name: ensure postgresql is at the latest version yum: name: postgresql state: latest name: ensure that postgresql is started service: name: postgresql state: started Y otro uso similar en Kubernetes --- apiVersion: v kind: Pod metadata: name: rss-site labels: app: web 4. Enlaces Sitio oficial de YAML: https://yaml.org/ YAML en Wikipedia: https://es.wikipedia.org/wiki/YAML Aprende YAML: YAML tutorial: Get started in 5 minutes https://www.educative.io/blog/yaml-tutorial Yaml info: https://www.yaml.info/learn/index.html Aprende X en Y minutos: https://learnxinyminutes.com/docs/es-es/yaml-es/","title":"YAML"},{"location":"Yaml/#yaml","text":"Introducci\u00f3n Ejemplo b\u00e1sico Ejemplos de uso 3.1. En mkdocs 3.2. En despliegues 3.2.1. GitHub Action 3.2.2. Docker compose 3.2.3. Ansible o Kubernetes Enlaces","title":"YAML"},{"location":"Yaml/#1-introduccion","text":"YAML (/\u02c8j\u00e6m\u0259l/) (see \u00a7 History and name) is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted. A YAML document represents a computer program's native data structure in a human readable text form. A node in a YAML document can have three basic data types: Scalar: Atomic data types like strings, numbers, booleans and null Sequence: A list of nodes Mapping: A map of nodes to nodes. Also known as Hashes, Hash Maps, Dictionaries or Objects. Unlike in many programming languages, a key can be more than just a string. It can be a sequence or mapping itself. YAML fue creado bajo la creencia de que todos los datos pueden ser representados adecuadamente como combinaciones de listas, hashes (mapeos) y datos escalares (valores simples). La sintaxis es relativamente sencilla y fue dise\u00f1ada teniendo en cuenta que fuera muy legible pero que a la vez fuese f\u00e1cilmente mapeable a los tipos de datos m\u00e1s comunes en la mayor\u00eda de los lenguajes de alto nivel.","title":"1. Introducci\u00f3n"},{"location":"Yaml/#2-ejemplo-basico","text":"Un mapa o hash asocia o enlaza un valor con una clave separados por :. Por ejemplo invoice o name. En el ejemplo se le han asociado valores at\u00f3micos: un entero y una cadena. Puede haber mapas anidados, como address. Listas o secuencias como la del mapa order_items:. Admite otra notaci\u00f3n order_items: [ Sled , Wrapping Paper ] invoice: 314159 name: Santa Claus address: street: Santa Claus Lane city: North Pole order_items: Sled Wrapping Paper","title":"2. Ejemplo b\u00e1sico"},{"location":"Yaml/#3-ejemplos-de-uso","text":"","title":"3. Ejemplos de uso"},{"location":"Yaml/#31-en-mkdocs","text":"El fichero de configuraci\u00f3n de mkdocs mkdocs.yml site_name: MkLorum site_url: https://example.com/ nav: Home: index.md About: about.md","title":"3.1. En mkdocs"},{"location":"Yaml/#32-en-despliegues","text":"Es muy frecuente usar YAML en ficheros de configuraci\u00f3n para despliegues de sistemas, contenedores etc. A continuaci\u00f3n algunos ejemplos: 3. 2. 1. GitHub Action name: Linux on: [push] # Compact Flow Style Sequence jobs: build: name: Run Tests runs-on: ubuntu-latest steps: name: Say Hello run: echo hello 3. 2. 2. Docker compose Para despliegues con Docker: version: \"3.9\" services: db: image: mysql:5. volumes: db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: db image: wordpress:latest volumes: wordpress_data:/var/www/html ports: \"8000:80\" restart: always environment: WORDPRESS_DB_HOST: db: WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: db_data: {} wordpress_data: {} 3. 2. 3. Ansible o Kubernetes De forma parecida, para despliegues con Ansible: --- name: update web servers hosts: webservers remote_user: root tasks: name: ensure apache is at the latest version yum: name: httpd state: latest name: write the apache config file template: src: /srv/httpd.j dest: /etc/httpd.conf name: update db servers hosts: databases remote_user: root tasks: name: ensure postgresql is at the latest version yum: name: postgresql state: latest name: ensure that postgresql is started service: name: postgresql state: started Y otro uso similar en Kubernetes","title":"3.2. En despliegues"},{"location":"Yaml/#-","text":"apiVersion: v kind: Pod metadata: name: rss-site labels: app: web","title":"---"},{"location":"Yaml/#4-enlaces","text":"Sitio oficial de YAML: https://yaml.org/ YAML en Wikipedia: https://es.wikipedia.org/wiki/YAML Aprende YAML: YAML tutorial: Get started in 5 minutes https://www.educative.io/blog/yaml-tutorial Yaml info: https://www.yaml.info/learn/index.html Aprende X en Y minutos: https://learnxinyminutes.com/docs/es-es/yaml-es/","title":"4. Enlaces"}]}